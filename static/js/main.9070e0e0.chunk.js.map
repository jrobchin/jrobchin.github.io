{"version":3,"sources":["components/nav-bar.component.js","components/fade-text-changer.component.js","components/hero.component.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mobileDropdown","location","react_default","a","createElement","className","role","id","data-target","href","Component","FadeTextChanger","componentDidMount","setInterval","isVisible","setState","textIndex","textList","length","fader","posed","span","visible","opacity","hidden","pose","SUBTITLES","Hero","subtitles","class","fade_text_changer_component","App","sectionRefs","hero","React","createRef","experience","projects","nav_bar_component","hero_component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9070e0e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobileDropdown: false\n    }\n  }\n\n  render() { \n    const { location } = this.props;\n\n    return (\n      <nav className=\"navbar\" role=\"navigation\">\n        <div className=\"navbar-brand\">\n          <div id=\"navbar-item-name\" className=\"navbar-item\">\n            <button className=\"is-link\">\n              jason chin\n            </button>\n          </div>\n\n          <a role=\"button\" className=\"navbar-burger burger\" data-target=\"nav-bar\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </a>\n        </div>\n\n        <div id=\"nav-bar\" className=\"navbar-menu\">\n          <div className=\"navbar-start\">\n            <div className=\"navbar-item\">\n              <button className=\"is-link section-link\">\n                experience\n              </button>\n            </div>\n\n            <div className=\"navbar-item\">\n              <button className=\"is-link section-link\">\n                projects\n              </button>\n            </div>\n          </div>\n\n          <div className=\"navbar-end\">\n            <div className=\"navbar-item\">\n              <a className=\"github-link\" href=\"https://github.com/jrobchin\">\n                github\n              </a>\n            </div>\n\n            <div className=\"navbar-item\">\n              <a className=\"linkedin-link\" href=\"https://linkedin.com/in/jrobchin\">\n                linkedin\n              </a>\n            </div>\n\n            <div className=\"navbar-item\">\n              <a className=\"devpost-link\" href=\"https://devpost.com/JasonChin\">\n                devpost\n              </a>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n \nexport default NavBar;","import React, { Component } from 'react';\nimport posed from 'react-pose';\n\nclass FadeTextChanger extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textIndex: 0,\n      isVisible: true \n    };\n    this.fader = posed.span({\n      visible: { opacity: 1 },\n      hidden: { opacity: 0 }\n    });\n  }\n\n  componentDidMount = () => {\n    setInterval(() => {\n\n      /* If it's visible change the text, otherwise just make it not visible */\n      if (this.state.isVisible) {\n        this.setState({ \n          isVisible: false,\n        });\n      } else {\n        this.setState({ \n          isVisible: true,\n          textIndex: (this.state.textIndex + 1) % this.props.textList.length,\n        });\n      }\n\n    }, 900);\n  }\n\n  render() {\n    return (\n      <this.fader pose={this.state.isVisible ? 'visible' : 'hidden'}>{this.props.textList[this.state.textIndex]}</this.fader>\n    );\n  }\n}\n\nexport default FadeTextChanger;","import React, { Component } from 'react';\nimport FadeTextChanger from './fade-text-changer.component';\n\nconst SUBTITLES = [\n  'software engineer',\n  'ai developer',\n  'educator',\n  'creator',\n];\n\nclass Hero extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtitles: SUBTITLES\n    };\n  }\n\n  render() { \n    return (\n      <div className=\"hero\">\n        <section class=\"hero is-medium is-primary\">\n          <div class=\"hero-body\">\n            <div class=\"container\">\n              <p class=\"title\">\n                jason chin\n              </p>\n              <p class=\"subtitle\">\n                <FadeTextChanger \n                  textList={this.state.subtitles}\n                />\n              </p>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n \nexport default Hero;","import React, { Component } from 'react';\nimport './sass/app.scss';\n\n// Components\nimport NavBar from './components/nav-bar.component';\nimport Hero from './components/hero.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.sectionRefs = {\n      hero: React.createRef(),\n      experience: React.createRef(),\n      projects: React.createRef(),\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"site-container\">\n        <NavBar />\n\n        <Hero />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}